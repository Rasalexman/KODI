package com.rasalexman.kodiksp

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ksp.writeTo
import java.io.IOException
import java.util.*

class KodiCodeGenerator(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) {

    private companion object {
        private const val KODI_GENERATED_PATH = "com.kodi.generated.modules."

        private const val DEFAULT_MODULE_NAME = "Module"
        private const val KODI_MODULE_PROPERTY_TYPE = "IKodiModule"

        private const val KODI_MEMBER_MODULE = "kodiModule"
        private const val TAG_MEMBER_NAME = "%M"

        private const val FILE_COMMENT = "This file was generated by KodiProcessor. Do not modify!"
    }

    private val modulesCodeMap = mutableMapOf<String, MutableList<CodeBlock>>()

    fun processModuleBlock(moduleBlock: ModuleBlock) {
        val (moduleName, codeBlock) = moduleBlock
        val list = modulesCodeMap.getOrPut(moduleName) { mutableListOf() }
        list.add(codeBlock)
    }

    fun generateModules() {
        modulesCodeMap.forEach(::processModules)
    }

    fun clear() {
        modulesCodeMap.clear()
    }

    private fun processModules(moduleName: String, moduleElements: List<CodeBlock>) {
        val lowerModuleName = moduleName.apply { this.first().lowercaseChar() }
        val packageName = "${KODI_GENERATED_PATH}${moduleName.lowercase(Locale.ENGLISH)}"
        val fileName = "${lowerModuleName.replaceFirstChar {
            if (it.isLowerCase()) it.titlecase(Locale.ENGLISH) else it.toString()
        }}${DEFAULT_MODULE_NAME}"

        val codeInitializer = buildCodeBlock {
            add("$TAG_MEMBER_NAME {", MemberName(Consts.KODI_PACKAGE_PATH, KODI_MEMBER_MODULE))
            moduleElements.forEach { block ->
                add(block)
            }
            add("}")
        }

        val typeName = ClassName(Consts.KODI_PACKAGE_PATH, KODI_MODULE_PROPERTY_TYPE)
        val moduleProperty = PropertySpec
            .builder("$lowerModuleName${DEFAULT_MODULE_NAME}", typeName)
            .initializer(codeInitializer).build()

        val file = FileSpec.builder(packageName, fileName)
            .addFileComment(FILE_COMMENT)
            .addProperty(moduleProperty)
            .build()
        try {
            file.writeTo(codeGenerator = codeGenerator, dependencies = Dependencies.ALL_FILES)
        } catch (e: IOException) {
            val message = java.lang.String.format("Unable to write file: %s", e.message)
            logger.error(message)
        }

        //logger.warn("-----> codeInitializer = ${codeInitializer}")
    }
}